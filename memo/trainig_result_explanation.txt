1. training-runs 에 대한 학습 설정

!python train.py \
  --outdir=training-runs \
  --cfg=stylegan3-t \
  --data=/content/stylegan3/my_dataset.zip \
  --gpus=1 \
  --batch=4 \
  --gamma=8.2 \
  --aug=noaug \
  --snap=10 \
  --kimg=1 \
--metrics=none



2. training-runs-02 결과에 대한 학습 설정

!python train.py \
  --outdir=training-runs-02 \
  --cfg=stylegan3-t \
  --data=/content/stylegan3/my_dataset.zip \
  --gpus=1 \
  --batch=4 \
  --gamma=8.2 \
  --mirror=1 \
  --aug=noaug \
  --metrics=fid50k_full \
  --snap=1 \
  --kimg=5 \
  --batch-gpu=4 \
  --workers=2

  =================================

outdir : 학습 결과를 저장할 디렉토리 이름
cfg : 사용할 네트워크. stylegan3-t는 사진 위치 변화에 덜 민감한 특성을 가짐
data : 학습할 데이터 셋 위치
gpus : 사용할 GPU 개수. 코랩에선 보통 1개만 사용
batch : 배치수. 
gamma=8.2 : Discriminator의 R1 regularization 강도. overfitting을 방지하며 8.2는 FFHQ 기준 기본값. discriminator가 너무 강하면 generator가 학습을 제대로 못 함.
mirror : 학습 중 좌우반전 증강 기법 적용
aug : ADA adaptive augmentation적용 여부, noaug는 x
metrics=fid50k_full : generator가 만든 50,000wkddml fake이미지와 FFHQ기준 real이미지의 분포간 거리 계산. 낮을수록 좋음
snap=1 : 매 1kimg마다 스냅샷저장. fakes000001.png같은 테스트 결과를 말하는듯
kimg=5 : 총 학습량. 5000 fake이미지를 생성할 정도로 학습 -> 5정도면 매우 짧은 편, 보통 2000은 하는듯
batch-gpu : 한 GPU당 배치 수
worker : 데이터 로딩 시 사용할 워커(서브 프로세스). 코랩에서는 2 이하가 안정적. 이미지를 읽어 GPU로 보내주는 역할이다. 학습 중 다음 배치를 준비할 때 미리 데이터를 로딩해야 효율적이기 때문에 사용
